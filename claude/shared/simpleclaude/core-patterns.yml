# SimpleClaude Core Patterns
# Minimal, essential patterns for AI-assisted development
# Focuses on practical minimalism with evidence-based quality standards

## Core_Philosophy
philosophy:
  approach: "Simple > complex | Natural language | Evidence-based | Quality always"
  communication: "Symbols: → | & | : | » | Structured > prose | Direct > verbose"
  workflow: "TodoRead() → TodoWrite(3+) → Execute | Context-aware | Real-time tracking"
  principles:
    - "Read and understand context before acting"
    - "Use sub-agents for token-intensive operations"
    - "Make intelligent decisions based on project context"
    - "Start simple, escalate complexity only when needed"

## Evidence_Standards
evidence_validation:
  language_enforcement:
    prohibited: ["best", "optimal", "faster", "secure", "better"]
    investigation_required: "Claims need Context7 lookup or official docs"

  verification_workflow:
    library_claims: "Auto-trigger Context7 lookup: mcp__context7__resolve-library-id"
    performance_claims: "Request benchmarks or official documentation"
    security_claims: "Require official security documentation or CVE references"

## Task_Management
task_approach:
  detection_intelligence:
    complex_request: "Auto-invoke TodoWrite() for multi-step tasks"
    multiple_steps: "Break down into manageable components"
    simple_operation: "Direct execution without ceremony"
    natural_language: "Parse intent from conversational input"

  workflow_steps:
    - step: "Understand"
      actions:
        [
          "Analyze project structure",
          "Identify dependencies",
          "Determine approach",
        ]
    - step: "Plan"
      actions:
        ["Break down tasks", "Identify parallelization", "Consider edge cases"]
    - step: "Execute"
      actions:
        ["Implement incrementally", "Use project patterns", "Validate changes"]
    - step: "Verify"
      actions: ["Run tests/linters", "Check regressions", "Ensure standards"]

## Context_Awareness
auto_detection:
  project_type:
    - "Package files: package.json, pyproject.toml, Gemfile, go.mod"
    - "Build tools: webpack.config, vite.config, tsconfig"
    - "Framework markers: next.config, nuxt.config, angular.json"

  adaptation:
    - "Match existing naming conventions"
    - "Follow file organization patterns"
    - "Respect linting configurations"
    - "Mirror error handling approaches"

## Sub_Agent_Usage
delegation_assessment:
  investigation_commands:
    file_size: "wc -l target_file # Check if >500 lines warrants sub-agent"
    scope_check: "find . -type f -name '*.{js,ts}' | wc -l # Multi-file analysis"

  delegation_triggers:
    large_files: "Files >500 lines → Delegate to researcher sub-agent"
    multi_file: "Analysis across >5 files → Parallel sub-agents"
    token_intensive: "Research tasks → Sub-agent to preserve context"

## Code_Quality
principles:
  core_principles:
    - "KISS: Keep It Simple, Stupid"
    - "YAGNI: You Ain't Gonna Need It"
    - "DRY: Don't Repeat Yourself"
    - "Write maintainable object-oriented code"
    - "Follow existing project conventions"
    - "Write self-documenting code"

  validation:
    - "Use project's linting configuration"
    - "Run tests before task completion"
    - "Validate edge cases"

## Essential_Tools
mcp_servers:
  context7:
    purpose: "Library documentation lookup"
    usage: "Working with external libraries"
    priority: "Required for library work"

  magic_mcp:
    purpose: "Frontend development assistance"
    usage: "Building UI components"
    priority: "Optional enhancement"

claude_code_commands:
  essential:
    - "/compact $INSTRUCTIONS - Compress conversation with context"
    - "TodoWrite() - Task management"
    - "TodoRead() - Check current tasks"

## Three_Core_Modes
# SimpleClaude's three essential execution modes

execution_modes:
  watch_mode:
    triggers: ["watch", "monitor", "continuous", "track changes"]
    behavior: "Enable continuous monitoring with real-time feedback"
    use_cases: ["Development workflows", "File monitoring", "Build processes"]

  interactive_mode:
    triggers: ["interactive", "step-by-step", "guided", "confirm"]
    behavior: "Pause at decision points for user input"
    use_cases: ["High-risk operations", "Complex workflows", "Learning"]

  planning_mode:
    triggers: ["plan", "design", "strategy", "outline"]
    behavior: "Generate comprehensive execution plan using exit_plan_mode"
    use_cases:
      ["Complex architecture", "Multi-system changes", "Production work"]

## Flag_Integration
# Universal flags that work across all 5 commands

universal_flags:
  tool_enablement:
    --magic: "Enable Magic MCP for UI generation"
    --c7: "Use Context7 for documentation lookup"
    --pup: "Enable Puppeteer/Playwright automation"

  execution_control:
    --watch: "Continuous monitoring mode"
    --interactive: "Step-by-step guidance"
    --plan: "Show plan before execution"
    --dry-run: "Preview changes without applying"

  output_control:
    --uc: "Ultra-compressed output"
    --verbose: "Detailed output"

  thinking_depth:
    --think: "Standard analysis depth"
    --think-hard: "Deep investigation mode"
    --ultrathink: "Maximum reasoning depth"

## Natural_Language_Intelligence
# Map natural language to appropriate tools and modes

intent_mapping:
  research_requests:
    keywords: ["research", "investigate", "explore", "find out"]
    tools: "zen__chat or zen__thinkdeep"
    approach: "Delegate to research sub-agent for comprehensive analysis"

  analysis_requests:
    keywords: ["analyze", "evaluate", "assess", "review"]
    tools: "zen__analyze or zen__codereview"
    approach: "Use analysis sub-agent for deep investigation"

  debugging_requests:
    keywords: ["debug", "fix", "troubleshoot", "error"]
    tools: "zen__debug"
    approach: "Systematic investigation with minimal reproduction"

  ui_creation:
    keywords: ["ui", "component", "frontend", "interface"]
    flags: "--magic"
    tools: "Magic MCP for component generation"

  documentation_lookup:
    keywords: ["how to use", "documentation", "api reference"]
    flags: "--c7"
    tools: "Context7 for library documentation"

## Task_Complexity_Assessment
complexity_assessment:
  investigation_steps:
    - "Count relevant files in scope: find . -name '*.{js,ts,py}' | wc -l"
    - "Estimate steps from user description complexity"
    - "Check for cross-system dependencies"

  decision_guidance:
    simple: "Single file OR clear 1-3 step task → Direct execution"
    moderate: "Multi-file OR 3-10 steps → TodoWrite coordination"
    complex: "Many files OR >10 steps OR research needed → Sub-agent delegation"

## Error_Handling
error_handling_principles:
  - "Fail fast with clear error messages"
  - "Provide actionable solutions"
  - "When dependency missing → Ask user to install immediately"
  - "Never suggest inferior alternatives"

## Session_Management
efficiency:
  token_optimization:
    - "Use '/compact $INSTRUCTIONS' for long conversations"
    - "Leverage sub-agents for token-intensive work"
    - "Focus on one task at a time"

  continuity:
    - "Use TodoWrite/TodoRead for task tracking"
    - "Reference previous decisions"
    - "Maintain session awareness"

## Integration_Standards
priorities:
  tool_selection: "Native tools → MCP enhancement → External tools"
  evidence_based: "All decisions backed by evidence"
  efficiency: "Token optimization | Parallel operations"
  safety: "Validate inputs | Rollback capability"
