# Context Detection - Smart defaults and auto-configuration
# Detects project context and adapts behavior accordingly

context_detection:
  project_type:
    detection_files:
      javascript:
        indicators: ["package.json", "node_modules"]
        frameworks:
          react: ["react in dependencies", "*.jsx files", "*.tsx files"]
          vue: ["vue in dependencies", "*.vue files"]
          angular: ["@angular in dependencies"]
          next: ["next in dependencies", "pages directory"]

      python:
        indicators:
          ["requirements.txt", "pyproject.toml", "setup.py", "Pipfile"]
        frameworks:
          django: ["django in dependencies", "manage.py"]
          flask: ["flask in dependencies"]
          fastapi: ["fastapi in dependencies"]

      go:
        indicators: ["go.mod", "go.sum"]

      rust:
        indicators: ["Cargo.toml", "Cargo.lock"]

      ruby:
        indicators: ["Gemfile", "rubocop.yml"]
        frameworks:
          rails: ["models views controllers"]

    auto_configure:
      - "Detect package manager (npm, yarn, pnpm, pip, poetry, bundler, cargo, go mod)"
      - "Detect version managers (mise, asdf, nvm, rbenv, pyenv)"
      - "Detect system package managers (brew, apt, yum)"
      - "Identify testing framework from existing tests"
      - "Recognize build tools and scripts"
      - "Adapt to existing file organization"
      - "Detect containerization (Docker, docker-compose)"
      - "Identify CI/CD platforms (GitHub Actions, GitLab CI, CircleCI)"

  code_style:
    detection_strategy:
      - "Analyze existing code for patterns"
      - "Check for linter configurations (.eslintrc, .prettierrc, etc.)"
      - "Detect indentation (spaces vs tabs, size)"
      - "Identify naming conventions (camelCase, snake_case, etc.)"

    adapt_to:
      - "Variable and function naming patterns"
      - "File and directory naming conventions"
      - "Import organization style"
      - "Comment and documentation format"

  git_workflow:
    detection_points:
      - "Analyze recent commit messages for patterns"
      - "Check for .gitmessage template"
      - "Check .git/hooks/ for pre-commit, pre-push hooks"
      - "Identify branch naming conventions"
      - "Detect PR/MR workflow patterns"
      - "Check for .gitignore patterns"
      - "Identify protected branches"

    fallback: "Use conventional commits if no clear pattern"

  library_usage:
    detection_patterns:
      javascript:
        - pattern: 'import .* from ["''][^./]'
          action: "Note external dependency"
          validation: "check_package_json"
        - pattern: 'require\(["''][^./]'
          action: "Note CommonJS dependency"
          validation: "check_package_json"

      python:
        - pattern: 'from \w+ import'
          action: "Note Python import"
          validation: "check_requirements"
        - pattern: 'import \w+'
          action: "Note Python module"
          validation: "check_requirements"

    evidence_validation:
      validation_workflow:
        step_1_local: "Check if library exists in project dependencies"
        step_2_context7: "If unknown ‚Üí Trigger Context7 lookup automatically"
        step_3_user: "If Context7 fails ‚Üí Ask user to confirm or research manually"

      user_prompts:
        unknown_library: "üîç Unknown library detected: {library_name}. Let me look this up with Context7..."
        context7_failed: "‚ùå Context7 couldn't find docs for {library_name}. Should I proceed anyway? (y/n)"
        validation_success: "‚úÖ {library_name} verified via {source}"

    auto_actions:
      - "When external library detected ‚Üí Run evidence_validation workflow"
      - "When UI framework detected ‚Üí Consider magic-mcp for components"
      - "Cache validation results for session"

  task_context_investigation:
    architecture_signals:
      keywords: ["design", "architecture", "system", "scale"]
      investigation: "Check for config files, examine project structure"
      commands:
        - "find . -name '*.config.*' -o -name 'docker*' -o -name '*compose*'"
        - "ls -la # Look for architectural indicators"

    implementation_signals:
      keywords: ["build", "create", "implement", "add"]
      investigation: "Check existing patterns and dependencies"
      command_examples:
        - "grep -r 'import.*from' . --include='*.js' | head -10"
        - "find . -name 'package.json' -exec cat {} \\;"

    mode_activation:
      - "Architecture task ‚Üí Activate planner mode"
      - "Implementation task ‚Üí Activate implementer mode"
      - "Quality task ‚Üí Activate tester mode"
      - "Mixed indicators ‚Üí Blend modes appropriately"

  smart_defaults:
    principles:
      - "Detect rather than dictate"
      - "Adapt to existing patterns"
      - "Learn from corrections"
      - "Start minimal, add as needed"
      - "Respect existing configurations"
      - "Never override explicit settings"

    examples:
      - "If React detected ‚Üí Assume JSX, component patterns"
      - "If tests exist ‚Üí Match existing test style"
      - "If CI/CD exists ‚Üí Respect existing pipeline"
      - "If docs exist ‚Üí Follow documentation format"

  environment_detection:
    files_to_check:
      - ".env, .env.example ‚Üí Environment variables in use"
      - "docker-compose.yml ‚Üí Container orchestration"
      - ".nvmrc, .ruby-version ‚Üí Version management"
      - "Makefile ‚Üí Build automation preferences"
      - ".editorconfig ‚Üí Editor settings to respect"
      - ".vscode/, .idea/ ‚Üí IDE configurations"
